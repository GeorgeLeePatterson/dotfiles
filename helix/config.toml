# Dark
theme = "gruvbox"
# theme = "base16"
# theme = "nightfox"
# theme = "catpuccin_mocha"
# theme = "new_moon"

# Light
# theme = "onelight"
# theme = "catpuccin_latte"

[editor]
line-number = "relative"
mouse = true
auto-completion = true
text-width = 100
rulers = [100]
true-color = true
undercurl = true
color-modes = true
cursorline = true
cursorcolumn = true
auto-save = true         # save when window looses focus
idle-timeout = 0
# original gutters = ["diagnostics", "spacer", "line-numbers", "spacer", "diff"]
# gutters = ["diff", "diagnostics", "line-numbers", "spacer"]
gutters = ["diagnostics", "spacer", "diff", "line-numbers", "spacer", "spacer"]
soft-wrap.enable = false
bufferline = "always"

[editor.cursor-shape]
insert = "bar"

[editor.file-picker]
hidden = false
git-global = false
git-ignore = false

[editor.lsp]
enable = true
auto-signature-help = true
display-inlay-hints = true
display-messages = true

[editor.statusline]
left = [
    "mode",
    "spacer",
    "version-control",
    "spacer",
    "separator",
    "file-name",
    "file-modification-indicator",
]
right = [
    "spinner",
    "spacer",
    "workspace-diagnostics",
    "separator",
    "spacer",
    "diagnostics",
    "position",
    "file-encoding",
    "file-line-ending",
    "file-type",
]
separator = "╎"
mode.normal = "NORMAL"
mode.insert = "INSERT"
mode.select = "SELECT"

[editor.indent-guides]
render = true
character = "┊" # Some characters that work well: "▏", "┆", "┊", "╎"

[keys.normal]
pageup = "half_page_up"
pagedown = "half_page_down"
"C-u" = "half_page_up"
"C-d" = "half_page_down"
C-v = "vsplit"
C-h = "jump_view_left"
C-j = "jump_view_down"
C-k = "jump_view_up"
C-l = "jump_view_right"
"A-k" = [
    "extend_to_line_bounds",
    "delete_selection",
    "move_line_up",
    "paste_before",
]
"A-j" = [
    "extend_to_line_bounds",
    "delete_selection",
    "move_line_down",
    "paste_before",
]
esc = [
    "collapse_selection",
    "keep_primary_selection",
    ":w",
] # remove additional cursors and selections
p = "paste_clipboard_after"
P = "paste_clipboard_before"
g = { a = "code_action" } # Maps `ga` to show possible code actions
"," = "repeat_last_motion"
C-s = ":w" # Maps Ctrl-s to the typable command :w which is an alias for :write (save file)
C-o = ":open ~/.config/helix/config.toml" # Maps Ctrl-o to opening of the helix config file
# a = "move_char_left" # Maps the 'a' key to the move_char_left command
# w = "move_line_up" # Maps the 'w' key move_line_up
# "C-S-esc" = "extend_line" # Maps Ctrl-Shift-Escape to extend_line
"ret" = [
    "open_below",
    "normal_mode",
] # Maps the enter key to open_below then re-enter normal mode

# Nvim-like
0 = "goto_line_start"
"$" = "goto_line_end"
"^" = "goto_first_nonwhitespace"
G = "goto_file_end"
"%" = "match_brackets"
V = ["select_mode", "extend_to_line_bounds"]
w = ["move_next_word_start", "move_char_right", "collapse_selection"]
e = ["move_next_word_end", "collapse_selection"]
b = ["move_prev_word_start", "collapse_selection"]
x = "delete_selection"
o = ["open_below", "insert_mode"]
O = ["open_above", "insert_mode"]

# If you want to keep the selection-while-moving behaviour of Helix, this two lines will help a lot,
# especially if you find having text remain selected while you have switched to insert or append mode
#
# There is no real difference if you have overriden the commands bound to 'w', 'e' and 'b' like above
# But if you really want to get familiar with the Helix way of selecting-while-moving, comment the
# bindings for 'w', 'e', and 'b' out and leave the bindings for 'i' and 'a' active below. A world of difference!
i = [
    "insert_mode",
    "collapse_selection",
] # Requires https://github.com/helix-editor/helix/issues/2052#issuecomment-1140358950
a = [
    "append_mode",
    "collapse_selection",
] # Requires https://github.com/helix-editor/helix/issues/2052#issuecomment-1140358950

[keys.select]
pageup = "half_page_up"
pagedown = "half_page_down"
"C-u" = "half_page_up"
"C-d" = "half_page_down"
esc = ["collapse_selection", "normal_mode"] # remove selections
y = "yank_joined_to_clipboard"
p = [
    "replace_selections_with_clipboard",
    ":w",
] # in select mode I always want to paste over my selection
P = ["replace_selections_with_clipboard", ":w"]
d = [
    "yank_joined_to_clipboard",
    "delete_selection",
    ":w",
] # add deleted text to system clipboaard
# c = ["trim_selections", "change_selection"] # when changing a line this stops the cursor moving to the beginning of the line underneath
z = "move_next_word_start"
"," = "repeat_last_motion"

# Some extra binds to allow us to insert/append in select mode because it's nice with multiple cursors
tab = [ "indent" ] # tab is read by most terminal editors as "C-i"
"S-tab" = ["unindent"]
C-a = ["append_mode", "collapse_selection"]

# Nvim-like
0 = "goto_line_start"
"$" = "goto_line_end"
"^" = "goto_first_nonwhitespace"
G = "goto_file_end"
D = ["extend_to_line_bounds", "delete_selection", "normal_mode"]
C = ["goto_line_start", "extend_to_line_bounds", "change_selection"]
"%" = "match_brackets"
S = "surround_add"                                                   # Basically 99% of what I use vim-surround for
i = "select_textobject_inner"
a = "select_textobject_around"
x = "delete_selection"

# Make selecting lines in visual mode behave sensibly
k = ["extend_line_up", "extend_to_line_bounds"]
j = ["extend_line_down", "extend_to_line_bounds"]

[keys.insert]
pageup = "half_page_up"
pagedown = "half_page_down"
"C-u" = "half_page_up"
"C-d" = "half_page_down"
esc = [":w", "normal_mode"]
"A-x" = "normal_mode"       # Maps Alt-X to enter normal mode
# j = { k = "normal_mode" } # Maps `jk` to exit insert mode

[keys.normal.space]
# Add comma to the end of the line
"," = [
    "save_selection",
    "goto_line_end",
    ":append-output echo ','",
    "collapse_selection",
    "delete_selection",
    "jump_backward",
]
# Add semicolumn to the end of the line
";" = [
    "save_selection",
    "goto_line_end",
    ":append-output echo ';'",
    "collapse_selection",
    "delete_selection",
    "jump_backward",
]
# o = ":sh zellij action new-pane -f"
# n = ":sh zellij run -cf -n lf -- lf"
F = "file_picker_in_current_buffer_directory" # useful for accessing sibling files rather than a file tree
"." = ":toggle-option file-picker.git-ignore" # toggle seeing files hidden with the .gitignore in file pickers
"=" = ":format"
"+" = ":indent-style 4"
q = ":q"
Q = ":quit-all!"
U = ":reload-all"
W = ":write!"
X = ":buffer-close!"
e = ":reset-diff-change"
n = ":new"
o = ":buffer-close-others"
u = ":reload"
w = ":write"
c = ":buffer-close"
"/" = "toggle_comments"

[keys.normal.space.l]
"i" = ":toggle lsp.display-inlay-hints"

# [keys.normal.space.c]
# g = ":sh zellij run -f -n go -- go run main.go"

[keys.normal.z]
"." = "align_view_center"
t = "align_view_top"
b = "align_view_bottom"

# Extend and select commands that expect a manual input can't be chained
# I've kept d[X] commands here because it's better to at least have the stuff you want to delete
# selected so that it's just a keystroke away to delete
[keys.normal.d]
d = [
    "extend_to_line_bounds",
    "yank_main_selection_to_clipboard",
    "delete_selection",
]
t = ["extend_till_char"]
s = ["surround_delete"]
i = ["select_textobject_inner"]
a = ["select_textobject_around"]
j = [
    "select_mode",
    "extend_to_line_bounds",
    "extend_line_below",
    "yank_main_selection_to_clipboard",
    "delete_selection",
    "normal_mode",
]
down = [
    "select_mode",
    "extend_to_line_bounds",
    "extend_line_below",
    "yank_main_selection_to_clipboard",
    "delete_selection",
    "normal_mode",
]
k = [
    "select_mode",
    "extend_to_line_bounds",
    "extend_line_above",
    "yank_main_selection_to_clipboard",
    "delete_selection",
    "normal_mode",
]
up = [
    "select_mode",
    "extend_to_line_bounds",
    "extend_line_above",
    "yank_main_selection_to_clipboard",
    "delete_selection",
    "normal_mode",
]
G = [
    "select_mode",
    "extend_to_line_bounds",
    "goto_last_line",
    "extend_to_line_bounds",
    "yank_main_selection_to_clipboard",
    "delete_selection",
    "normal_mode",
]
w = [
    "move_next_word_start",
    "yank_main_selection_to_clipboard",
    "delete_selection",
]
W = [
    "move_next_long_word_start",
    "yank_main_selection_to_clipboard",
    "delete_selection",
]
g = { g = [
    "select_mode",
    "extend_to_line_bounds",
    "goto_file_start",
    "extend_to_line_bounds",
    "yank_main_selection_to_clipboard",
    "delete_selection",
    "normal_mode",
] }

[keys.normal.y]
y = [
    "extend_to_line_bounds",
    "yank_main_selection_to_clipboard",
    "normal_mode",
    "collapse_selection",
]
j = [
    "select_mode",
    "extend_to_line_bounds",
    "extend_line_below",
    "yank_main_selection_to_clipboard",
    "collapse_selection",
    "normal_mode",
]
down = [
    "select_mode",
    "extend_to_line_bounds",
    "extend_line_below",
    "yank_main_selection_to_clipboard",
    "collapse_selection",
    "normal_mode",
]
k = [
    "select_mode",
    "extend_to_line_bounds",
    "extend_line_above",
    "yank_main_selection_to_clipboard",
    "collapse_selection",
    "normal_mode",
]
up = [
    "select_mode",
    "extend_to_line_bounds",
    "extend_line_above",
    "yank_main_selection_to_clipboard",
    "collapse_selection",
    "normal_mode",
]
G = [
    "select_mode",
    "extend_to_line_bounds",
    "goto_last_line",
    "extend_to_line_bounds",
    "yank_main_selection_to_clipboard",
    "collapse_selection",
    "normal_mode",
]
w = [
    "move_next_word_start",
    "yank_main_selection_to_clipboard",
    "collapse_selection",
    "normal_mode",
]
W = [
    "move_next_long_word_start",
    "yank_main_selection_to_clipboard",
    "collapse_selection",
    "normal_mode",
]
g = { g = [
    "select_mode",
    "extend_to_line_bounds",
    "goto_file_start",
    "extend_to_line_bounds",
    "yank_main_selection_to_clipboard",
    "collapse_selection",
    "normal_mode",
] }
