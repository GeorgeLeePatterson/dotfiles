// Zed settings
//
// For information on how to configure Zed, see the Zed
// documentation: https://zed.dev/docs/configuring-zed
//
// To see all of Zed's default settings without changing your
// custom settings, run the `open default settings` command
// from the command palette or from `Zed` application menu.
{
  // -- Commonly changed
  "theme": "Base16 emil",
  "base_keymap": "VSCode",
  "buffer_font_family": "JetBrainsMono Nerd Font",
  "ui_font_family": "Inconsolata Nerd Font",
  "ui_font_size": 16,
  "buffer_font_size": 16,
  "inlay_hints": {
    "enabled": true,
    "show_type_hints": true,
    "show_parameter_hints": true,
    "show_other_hints": true
  },
  "preferred_line_length": 100,
  "vim_mode": true,
  "active_pane_magnification": 1.1,
  // -- Less commonly changed
  // LSP Specific settings.
  "lsp": {
    // Specify the LSP name as a key here.
    // "rust-analyzer": {
    //     // These initialization options are merged into Zed's defaults
    //     "initialization_options": {
    //         "check": {
    //             "command": "clippy" // rust-analyzer.check.command (default: "check")
    //         }
    //     }
    // }
  },
  "language_overrides": {
    "Markdown": {
      "soft_wrap": "editor_width"
    },
    "JSON": {
      "soft_wrap": "editor_width"
    },
    "LOG": {
      "soft_wrap": "editor_width"
    },
    "Plain Text": {
      "soft_wrap": "editor_width"
    },
    "YAML": {
      "format_on_save": "off"
    }
  },
  // use relative line numbers
  "relative_line_numbers": true,
  // Vim settings
  "vim": {
    "use_system_clipboard": "always",
    "use_multiline_find": false,
    "use_smartcase_find": false
  },
  "scrollbar": {
    // When to show the scrollbar in the editor.
    // This setting can take four values:
    //
    // 1. Show the scrollbar if there's important information or
    //    follow the system's configured behavior (default):
    //   "auto"
    // 2. Match the system's configured behavior:
    //    "system"
    // 3. Always show the scrollbar:
    //    "always"
    // 4. Never show the scrollbar:
    //    "never"
    "show": "always",
    // Whether to show cursor positions in the scrollbar.
    "cursors": true,
    // Whether to show git diff indicators in the scrollbar.
    "git_diff": true,
    // Whether to show buffer search results in the scrollbar.
    "search_results": true,
    // Whether to show selected symbol occurrences in the scrollbar.
    "selected_symbol": true,
    // Whether to show diagnostic indicators in the scrollbar.
    "diagnostics": true
  },
  // When to populate a new search's query based on the text under the cursor.
  // This setting can take the following three values:
  //
  // 1. Always populate the search query with the word under the cursor (default).
  //    "always"
  // 2. Only populate the search query when there is text selected
  //    "selection"
  // 3. Never populate the search query
  //    "never"
  "seed_search_query_from_cursor": "selection",
  // When to automatically save edited buffers. This setting can
  // take four values.
  //
  // 1. Never automatically save:
  //     "autosave": "off",
  // 2. Save when changing focus away from the Zed window:
  //     "autosave": "on_window_change",
  // 3. Save when changing focus away from a specific buffer:
  //     "autosave": "on_focus_change",
  // 4. Save when idle for a certain amount of time:
  //     "autosave": { "after_delay": {"milliseconds": 500} },
  "autosave": "off",
  // Settings related to the editor's tabs
  "tabs": {
    // Show git status colors in the editor tabs.
    "git_status": true,
    // Position of the close button on the editor tabs.
    "close_position": "right"
  },
  // How to perform a buffer format. This setting can take 4 values:
  //
  // 1. Format code using the current language server:
  //     "formatter": "language_server"
  // 2. Format code using an external command:
  //     "formatter": {
  //       "external": {
  //         "command": "prettier",
  //         "arguments": ["--stdin-filepath", "{buffer_path}"]
  //       }
  //     }
  // 3. Format code using Zed's Prettier integration:
  //     "formatter": "prettier"
  // 4. Default. Format files using Zed's Prettier integration (if applicable),
  //    or falling back to formatting via language server:
  //     "formatter": "auto"
  "formatter": "language_server",
  // An object whose keys are language names, and whose values
  // are arrays of filenames or extensions of files that should
  // use those languages.
  //
  // For example, to treat files like `foo.notjs` as JavaScript,
  // and 'Embargo.lock' as TOML:
  //
  // {
  //   "JavaScript": ["notjs"],
  //   "TOML": ["Embargo.lock"]
  // }
  //
  "file_types": {
    "YAML": ["yml"]
  },
  // How to soft-wrap long lines of text. This setting can take
  // three values:
  //
  // 1. Do not soft wrap.
  //      "soft_wrap": "none",
  // 2. Prefer a single line generally, unless an overly long line is encountered.
  //      "soft_wrap": "prefer_line",
  // 3. Soft wrap lines that overflow the editor:
  //      "soft_wrap": "editor_width",
  // 4. Soft wrap lines at the preferred line length
  //      "soft_wrap": "preferred_line_length",
  "soft_wrap": "none",
  // Set whether the option key behaves as the meta key.
  // May take 2 values:
  //  1. Rely on default platform handling of option key, on macOS
  //     this means generating certain unicode characters
  //         "option_to_meta": false,
  //  2. Make the option keys behave as a 'meta' key, e.g. for emacs
  //         "option_to_meta": true,
  "option_as_meta": true,
  "copilot": {
    // The set of glob patterns for which copilot should be disabled
    // in any matching file.
    "disabled_globs": [".env"]
  },
  // What to do when multibuffer is double clicked in some of its excerpts
  // (parts of singleton buffers).
  // May take 2 values:
  //  1. Behave as a regular buffer and select the whole word (default).
  //         "double_click_in_multibuffer": "select"
  //  2. Open the excerpt clicked as a new buffer in the new tab.
  //         "double_click_in_multibuffer": "open",
  // For the case of "open", regular selection behavior can be achieved by holding `alt` when double clicking.
  "double_click_in_multibuffer": "open",
  // Different settings for specific languages.
  "languages": {
    "C++": {
      "format_on_save": "off"
    },
    "C": {
      "format_on_save": "off"
    },
    "Elixir": {
      "language_servers": ["elixir-ls", "!next-ls", "!lexical", "..."]
    },
    "Gleam": {
      "tab_size": 2
    },
    "Go": {
      "code_actions_on_format": {
        "source.organizeImports": true
      }
    },
    "HEEX": {
      "language_servers": ["elixir-ls", "!next-ls", "!lexical", "..."]
    },
    "Make": {
      "hard_tabs": true
    },
    "Markdown": {
      "format_on_save": "off"
    },
    "Prisma": {
      "tab_size": 2
    },
    "Ruby": {
      "language_servers": ["solargraph", "..."]
    }
  },
  "telemetry": {
    "diagnostics": false,
    "metrics": false
  }
}
